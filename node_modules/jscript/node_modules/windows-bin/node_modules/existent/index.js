'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var fs = require('fs'),
    path = require('path'),
    after = require('after');

function existent(paths, base, done) {
  if (typeof base === 'function') done = base, base = [];else base = base == null ? [] : [].concat(base);

  paths = [].concat(paths);

  var missing = [],
      existing = [],
      fn = typeof fs.access === 'function' ? fs.access : fs.stat;

  var next = after(paths.length, function () {
    var n = missing.length;

    if (n === 0) done(null, missing, existing);else done(error(missing, n), missing, existing);
  });

  paths.forEach(function (p) {
    var resolved = path.resolve.apply(path, _toConsumableArray(base).concat([p]));

    fn(resolved, function (err) {
      ;(err ? missing : existing).push(resolved);
      next();
    });
  });
}

existent.sync = function (paths) {
  var base = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

  paths = [].concat(paths);
  base = [].concat(base);

  var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;

  for (var i = paths.length; i--;) {
    try {
      fn(path.resolve.apply(path, _toConsumableArray(base).concat([paths[i]])));
    } catch (_) {
      return false;
    }
  }

  return true;
};

existent.assert = function (paths) {
  var base = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

  var original = paths;

  paths = [].concat(paths);
  base = [].concat(base);

  var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync,
      missing = [];

  for (var i = 0, l = paths.length; i < l; i++) {
    var resolved = path.resolve.apply(path, _toConsumableArray(base).concat([paths[i]]));

    try {
      fn(resolved);
    } catch (_) {
      missing.push(resolved);
    }
  }

  var n = missing.length;
  if (n > 0) throw error(missing, n);

  return original;
};

function error(missing, n) {
  var prefix = n === 1 ? 'File does' : n + ' files do',
      message = prefix + ' not exist: ' + missing.join(', '),
      err = new Error(message);

  err.missing = missing;
  return err;
}

module.exports = existent;
